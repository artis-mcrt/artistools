---
name: Build and deploy to PyPI/testPyPI

on:
    push:
    merge_group:
    release:
        types: [published, edited]
    repository_dispatch:
        types: [trigger_checks]
    workflow_dispatch:

jobs:
    build_wheels:
        name: Build wheels for ${{ matrix.target.os_arch }}
        strategy:
            matrix:
                target:
                  [
                    {os_arch: "manylinux_x86_64", runs-on: "ubuntu-24.04"},
                    {os_arch: "musllinux_x86_64", runs-on: "ubuntu-24.04"},
                    {os_arch: "manylinux_aarch64", runs-on: "ubuntu-24.04-arm"},  # waiting for setup-uv action to support ubuntu arm runners
                    {os_arch: "musllinux_aarch64", runs-on: "ubuntu-24.04-arm"},
                    {os_arch: "macosx_arm64", runs-on: "macos-15"},
                  ]
            fail-fast: false
        runs-on: ${{ matrix.target.runs-on }}
        env:
            CIBW_ENVIRONMENT_PASS_LINUX: SETUPTOOLS_SCM_PRETEND_VERSION_FOR_ARTISTOOLS
            CIBW_BUILD: 'cp3*-${{ matrix.target.os_arch }}'
            MACOSX_DEPLOYMENT_TARGET: 15.0

        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - uses: actions/setup-python@v5

            - name: Cache cargo and rust build
              uses: actions/cache@v4
              with:
                  path: |
                    ~/.cargo/bin/
                    ~/.cargo/registry/index/
                    ~/.cargo/registry/cache/
                    ~/.cargo/git/db/
                    rust/target/
                  key: cibuildwheel-rust-target-${{ matrix.target.os_arch }}-${{ hashFiles('**/Cargo.lock') }}-${{ github.run_id }}
                  restore-keys: |
                      cibuildwheel-rust-target-${{ matrix.target.os_arch }}-${{ hashFiles('**/Cargo.lock') }}-
                      cibuildwheel-rust-target-${{ matrix.target.os_arch }}-

            - name: Strip dev tag from version
              run: |
                  python3 -m pip install --upgrade uv setuptools_scm[toml]
                  echo "SETUPTOOLS_SCM_PRETEND_VERSION_FOR_ARTISTOOLS=$(python3 -m setuptools_scm --strip-dev)" >> $GITHUB_ENV

            - name: Build wheels
              uses: pypa/cibuildwheel@v2.22.0

            - uses: actions/upload-artifact@v4
              with:
                  name: cibw-wheels-${{ matrix.target.os_arch }}-${{ strategy.job-index }}
                  path: ./wheelhouse/*.whl

    build_sdist:
        name: Build source distribution
        runs-on: ubuntu-24.04
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - uses: actions/setup-python@v5

            - name: Install dependencies
              run: |
                  python3 -m pip install --upgrade uv setuptools_scm[toml]
                  echo "SETUPTOOLS_SCM_PRETEND_VERSION_FOR_ARTISTOOLS=$(python3 -m setuptools_scm --strip-dev)" >> $GITHUB_ENV

            - name: Build sdist
              run: |
                  uv build --sdist

            - uses: actions/upload-artifact@v4
              with:
                  name: cibw-sdist
                  path: dist/*.tar.gz

    testdeploy:
        name: Test upload to TestPyPI
        needs: [build_wheels, build_sdist]
        runs-on: ubuntu-24.04
        environment: test
        permissions:
            id-token: write
        if: startsWith(github.ref , 'refs/tags/v') != true
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - uses: actions/setup-python@v5

            - uses: actions/download-artifact@v4
              with:
                  pattern: cibw-*
                  path: dist
                  merge-multiple: true

            - name: Publish package to TestPyPI
              uses: pypa/gh-action-pypi-publish@release/v1
              with:
                  skip-existing: true
                  verbose: false
                  repository-url: https://test.pypi.org/legacy/

    deploy:
        name: Upload to PyPI
        needs: [build_wheels, build_sdist]
        runs-on: ubuntu-24.04
        environment: release
        permissions:
            id-token: write
        if: startsWith(github.ref, 'refs/tags/v')
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - uses: actions/setup-python@v5

            - uses: actions/download-artifact@v4
              with:
                  pattern: cibw-*
                  path: dist
                  merge-multiple: true

            - name: Publish package to PyPI
              uses: pypa/gh-action-pypi-publish@release/v1
              with:
                  skip-existing: true
                  verbose: false
