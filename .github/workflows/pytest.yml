---
name: Test and lint
permissions:
    contents: read
on:
    push:
    merge_group:
    schedule:
        - cron: 0 10 * * 2
    #pull_request:
    workflow_dispatch:
    repository_dispatch:
        types: [trigger_checks]

jobs:
    lint:
        name: Format, lint, and type check
        runs-on: ubuntu-24.04
        env:
            RUFF_OUTPUT_FORMAT: github
            UV_FROZEN: 1
        steps:
            - uses: actions/checkout@v5
              with:
                  fetch-depth: 0

            - uses: astral-sh/setup-uv@v7
              with:
                  activate-environment: true

            - name: Get python minor version
              run: |
                  echo "PYTHON_MINOR_VERSION=$(python -c 'import platform; print(platform.python_version_tuple()[1])')" >> $GITHUB_ENV
                  echo "PYO3_PYTHON=python3.$(python -c 'import platform; print(platform.python_version_tuple()[1])')" >> $GITHUB_ENV

            - name: Cache cargo and rust build
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      rust/target/
                  key: cargo-rust-target-${{ runner.os }}${{ runner.arch }}-python3.${{ env.PYTHON_MINOR_VERSION }}-${{ hashFiles('**/Cargo.lock') }}-${{
                      github.run_id }}
                  restore-keys: |
                      cargo-rust-target-${{ runner.os }}${{ runner.arch }}-python3.${{ env.PYTHON_MINOR_VERSION }}-${{ hashFiles('**/Cargo.lock') }}-
                      cargo-rust-target-${{ runner.os }}${{ runner.arch }}-python3.${{ env.PYTHON_MINOR_VERSION }}-
                      cargo-rust-target-${{ runner.os }}${{ runner.arch }}-

            - name: Install artistools[extras]
              run: |
                  uv sync --all-extras
                  uv pip install --compile-bytecode .[extras]

            - name: Run Ruff
              if: always()
              run: |
                  uv run -- ruff --version
                  uv run -- ruff check --exit-non-zero-on-fix --no-fix

            - name: Run Ruff Format
              if: always()
              run: uv run -- ruff format --check --exit-non-zero-on-format

            - name: Run ty
              if: always()
              run: uv run -- ty check

            - name: Run pyright
              if: always()
              run: uv run -- pyright --warnings

            - name: Run mypy
              if: always()
              run: uv run -- mypy

            - name: Cache prek
              uses: actions/cache@v4
              with:
                  path: ~/.cache/prek
                  key: prek-3-${{ runner.os }}${{ runner.arch }}-${{ hashFiles('.pre-commit-config.yaml') }}-${{ github.run_id }}
                  restore-keys: |
                      prek-3-${{ runner.os }}${{ runner.arch }}-${{ hashFiles('.pre-commit-config.yaml') }}-
                      prek-3-${{ runner.os }}${{ runner.arch }}-

            - name: Run prek pre-commit checks
              run: |
                  prek install
                  prek run --all-files --show-diff-on-failure --color=always

            - name: Run rust clippy
              if: always()
              working-directory: rust/
              run: |
                  rustup component add clippy
                  cargo clippy --all-features -- -D warnings -D clippy::pedantic

    pytest:
        timeout-minutes: 120
        runs-on: ${{ matrix.os.name }}-${{ matrix.os.version }}
        strategy:
            fail-fast: false
            matrix:
                os: [{name: macos, version: '26'}, {name: ubuntu, version: '24.04'}]
                python-minor-version: ['11', '12', '13', '14', 14t]
                exclude:
                    - os: {name: macos, version: '26'}
                      python-minor-version: 11
                    - os: {name: macos, version: '26'}
                      python-minor-version: 12
                    - os: {name: ubuntu, version: '24.04'}
                      python-minor-version: 14
                    - os: {name: ubuntu, version: '24.04'}
                      python-minor-version: 14t
        env:
            OS: ${{ matrix.os.name }}-${{ matrix.os.version }}
            PYTHON: 3.${{ matrix.python-minor-version }}
            PYTHON_GIL: ${{ endsWith(matrix.python-minor-version, 't') && '0' || '1' }}
            UV_FROZEN: 1
            PYO3_PYTHON: python3.${{ matrix.python-minor-version }}
        name: pytest ${{ matrix.os.name }} python 3.${{ matrix.python-minor-version }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v5
              with:
                  fetch-depth: 0

            - uses: astral-sh/setup-uv@v7
              with:
                  activate-environment: true
                  python-version: 3.${{ matrix.python-minor-version }}

            - name: Cache cargo and rust build
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      rust/target/
                  key: cargo-rust-target-${{ runner.os }}${{ runner.arch }}-python3.${{ matrix.python-minor-version }}-${{ hashFiles('**/Cargo.lock') }}-${{
                      github.run_id }}
                  restore-keys: |
                      cargo-rust-target-${{ runner.os }}${{ runner.arch }}-python3.${{ matrix.python-minor-version }}-${{ hashFiles('**/Cargo.lock') }}-
                      cargo-rust-target-${{ runner.os }}${{ runner.arch }}-python3.${{ matrix.python-minor-version }}-
                      cargo-rust-target-${{ runner.os }}${{ runner.arch }}-

            - name: Install artistools (no dev deps)
              run: |
                  rustup update stable
                  uv sync --no-dev
                  uv pip install --compile-bytecode .

            - name: Check artistools command line tool
              run: |
                  artistools --help
                  artistools completions

            - name: Cache test data
              uses: actions/cache@v4
              with:
                  enableCrossOsArchive: true
                  path: tests/data/*.tar.xz
                  key: testdata20231114

            - name: Download/extract test data
              working-directory: tests/data/
              run: source ./setuptestdata.sh

            - name: Install dev deps
              run: uv sync

            - name: Test with pytest
              run: uv run --no-sync -- python -m pytest --cov=./ --cov-report=xml

            - name: Report coverage
              run: uv run -- python -m coverage report

            - uses: codecov/codecov-action@v5
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  files: ./coverage.xml
                  # directory: ./coverage/reports/
                  flags: unittests
                  env_vars: OS,PYTHON
                  name: codecov-umbrella
                  fail_ci_if_error: false
                  # path_to_write_report: ./coverage/codecov_report.txt
                  verbose: true

            - name: Upload output files
              uses: actions/upload-artifact@v4
              with:
                  name: testoutput-${{ matrix.os.name }}-${{ matrix.os.version }}-py3${{ matrix.python-minor-version }}
                  path: tests/output/
