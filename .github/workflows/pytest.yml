---
name: Test and lint

on:
    push:
    merge_group:
    schedule:
        - cron: 0 10 * * 2
    #pull_request:
    workflow_dispatch:
    repository_dispatch:
        types: [trigger_checks]

jobs:
    lint:
        name: Format, lint, and type check
        runs-on: macos-15
        env:
            RUFF_OUTPUT_FORMAT: github
            UV_FROZEN: 1
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Cache cargo and rust build
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      rust/target/
                  key: pytest-rust-target-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-${{ github.run_id }}
                  restore-keys: |
                      pytest-rust-target-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-
                      pytest-rust-target-${{ runner.os }}-

            - name: Setup uv
              uses: astral-sh/setup-uv@v6
              with:
                  activate-environment: true

            - name: Install artistools[extras]
              run: |
                  uv sync
                  source .venv/bin/activate
                  uv pip install --editable .[extras]

            - name: Run Ruff
              if: always()
              run: |
                  uv run -- ruff --version
                  uv run -- ruff check --exit-non-zero-on-fix --no-fix

            - name: Run Ruff Format
              if: always()
              run: uv run -- ruff format --check --exit-non-zero-on-format

            - name: Run mypy
              if: always()
              run: uv run -- mypy

            - name: Run pyright
              if: always()
              run: uv run -- pyright --warnings

            - name: Run pylint
              if: always()
              run: uv run -- pylint --output-format=github artistools

            - name: Cache pre-commit
              uses: actions/cache@v4
              with:
                  path: ~/.cache/pre-commit
                  key: pre-commit-3|${{ hashFiles('.pre-commit-config.yaml') }}

            - name: Run pre-commit
              run: |
                  source .venv/bin/activate
                  uv run -- pre-commit run --all-files --show-diff-on-failure --color=always

    superlinter:
        name: Super linter
        runs-on: ubuntu-24.04

        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                  # Full git history is needed to get a proper list of changed files within `super-linter`
                  fetch-depth: 0

            - name: Set up Python
              uses: actions/setup-python@v5

            - name: Lint Code Base
              uses: github/super-linter/slim@v7
              env:
                  LINTER_RULES_PATH: ./
                  LOG_LEVEL: WARN
                  VALIDATE_JSON_PRETTIER: false
                  VALIDATE_GITHUB_ACTIONS: false
                  VALIDATE_GITLEAKS: false
                  VALIDATE_JSCPD: false
                  VALIDATE_PYTHON_BLACK: false
                  VALIDATE_CHECKOV: false
                  VALIDATE_MARKDOWN_PRETTIER: false
                  VALIDATE_PYTHON_FLAKE8: false
                  VALIDATE_PYTHON_ISORT: false
                  VALIDATE_PYTHON_PYINK: false
                  VALIDATE_PYTHON_PYLINT: false
                  VALIDATE_PYTHON_MYPY: false
                  VALIDATE_PYTHON_RUFF: false
                  VALIDATE_YAML_PRETTIER: false
                  YAML_ERROR_ON_WARNING: false
                  DEFAULT_BRANCH: main
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    pytest:
        timeout-minutes: 120
        runs-on: ${{ matrix.os.name }}-${{ matrix.os.version }}
        strategy:
            fail-fast: false
            matrix:
                os: [{name: macos, version: '15'}, {name: ubuntu, version: '24.04'}]
                python-version: ['3.12', '3.13', '3.14', 3.14t]
                exclude:
                    - os: {name: ubuntu, version: '24.04'}
                      python-version: 3.14
                    - os: {name: ubuntu, version: '24.04'}
                      python-version: 3.14t
        env:
            OS: ${{ matrix.os.name }}-${{ matrix.os.version }}
            PYTHON: ${{ matrix.python-version }}
            PYTHON_GIL: ${{ endsWith(matrix.python-version, 't') && '0' || '1' }}
            UV_FROZEN: 1

        name: pytest ${{ matrix.os.name }} python ${{ matrix.python-version }}
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Cache cargo and rust build
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      rust/target/
                  key: pytest-rust-target-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-${{ github.run_id }}
                  restore-keys: |
                      pytest-rust-target-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-
                      pytest-rust-target-${{ runner.os }}-

            - name: Setup uv
              uses: astral-sh/setup-uv@v6
              with:
                  activate-environment: true
                  python-version: ${{ matrix.python-version }}

            - name: install apache-arrow
              if: matrix.os.name == 'macos' && startsWith(matrix.python-version, '3.14')
              run: |
                  brew update
                  brew install apache-arrow gcc openblas
                  brew link --force openblas
                  echo "LIBRARY_PATH=/opt/homebrew/opt/lib" >> $GITHUB_ENV
                  echo "LD_LIBRARY_PATH=/opt/homebrew/opt/lib" >> $GITHUB_ENV
                  echo "CPATH=$HOMEBREW_PREFIX/include:$CPATH" >> $GITHUB_ENV
                  echo "ARROW_HOME=$(brew --prefix apache-arrow)" >> $GITHUB_ENV
                  CC=gcc-15 CXX=g++-15 uv pip install numexpr
                  uv pip install pyarrow

            - name: Install artistools (no dev deps)
              run: |
                  rustup update stable
                  uv sync --no-dev
                  uv run -- python --version
                  uv pip install .

            - name: Check artistools command line tool
              run: |
                  uv run -- python --version
                  uv run -- artistools --help
                  uv run -- artistools completions

            - name: Cache test data
              uses: actions/cache@v4
              with:
                  enableCrossOsArchive: true
                  path: tests/data/*.tar.xz
                  key: testdata20231114

            - name: Download/extract test data
              working-directory: tests/data/
              run: source ./setuptestdata.sh

            - name: Install artistools
              run: |
                  uv sync --python ${{ matrix.python-version }}
                  uv pip install --compile-bytecode --editable .

            - name: install matplotlib nightly
              if: matrix.os.name == 'macos' && startsWith(matrix.python-version, '3.14')
              run: |
                  uv pip install pip
                  python -m pip install --upgrade --pre --index-url https://pypi.anaconda.org/scientific-python-nightly-wheels/simple --extra-index-url https://pypi.org/simple matplotlib
                  uv run --no-sync -- artistools --help

            - name: Test with pytest
              run: uv run --no-sync -- python -m pytest --cov=./ --cov-report=xml

            - name: Report coverage
              run: uv run -- python -m coverage report

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v5
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  files: ./coverage.xml
                  # directory: ./coverage/reports/
                  flags: unittests
                  env_vars: OS,PYTHON
                  name: codecov-umbrella
                  fail_ci_if_error: false
                  # path_to_write_report: ./coverage/codecov_report.txt
                  verbose: true

            - name: Upload output files
              uses: actions/upload-artifact@v4
              with:
                  name: testoutput-${{ matrix.os.name }}-${{ matrix.os.version }}-py${{ matrix.python-version }}
                  path: tests/output/
