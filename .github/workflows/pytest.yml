---
name: Installation and pytest

on:
    push:

jobs:
    pytest:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                # os: [ubuntu-latest, macos-latest]
                os: [ubuntu-latest]
                python-version: ['3.9', '3.10', 3.11-dev]
        env:
            OS: ${{ matrix.os }}
            PYTHON: ${{ matrix.python-version }}

        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                  cache: pip
                  python-version: ${{ matrix.python-version }}

            - name: Install dependencies
              run: |
                  sudo apt-get install libarrow-dev libopenblas-dev  # needed for scipy and pyarrow install on 3.11
                  python3 -m pip install --upgrade pip wheel
                  python3 -m pip install -r requirements.txt

                  # upgrade all installed packages to their latest versions
                  # python3 -m pip list --format=freeze --outdated | cut -d '=' -f1 | xargs -n1 python3 -m pip install --upgrade

            - name: Install artistools
              run: |
                  python -m pip install -e .

            - name: Cache test data
              uses: actions/cache@v3
              id: cache-atomicdata
              with:
                  path: tests/data/testmodel.tar.xz
                  key: https://theory.gsi.de/~lshingle/artis_http_public/artistools/testmodel.tar.xz

            - name: Download/extract test data
              # if: steps.cache-atomicdata.outputs.cache-hit != 'true'
              working-directory: tests/data/
              run: source ./setuptestdata.sh

            - name: Test with pytest
              run: |
                  pytest --cov=./ --cov-report=xml --durations=0

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  files: ./coverage.xml
                  # directory: ./coverage/reports/
                  flags: unittests
                  env_vars: OS,PYTHON
                  name: codecov-umbrella
                  fail_ci_if_error: true
                  # path_to_write_report: ./coverage/codecov_report.txt
                  verbose: true
